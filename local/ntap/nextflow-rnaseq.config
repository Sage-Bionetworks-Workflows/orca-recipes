process {

  withName: FASTQC {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 3
      memory = { adj_mem( task, [2.GB] ) }
  }

  withName: RSEQC_JUNCTIONANNOTATION {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: SALMON_SE_GENE_SCALED {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [2.GB] ) }
  }

  withName: SAMTOOLS_INDEX {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 3
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: STAR_ALIGN {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 12
      memory = { adj_mem( task, [37.GB] ) }
  }

  withName: SALMON_QUANT {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 6
      memory = { adj_mem( task, [12.GB] ) }
  }

  withName: RSEQC_INNERDISTANCE {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [2.GB] ) }
  }

  withName: SAMTOOLS_STATS {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 3
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: RSEQC_READDUPLICATION {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [16.GB] ) }
  }

  withName: CUSTOM_DUMPSOFTWAREVERSIONS {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: DUPRADAR {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [2.GB] ) }
  }

  withName: SUBREAD_FEATURECOUNTS {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 5
      memory = { adj_mem( task, [3.GB] ) }
  }

  withName: SAMTOOLS_FLAGSTAT {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 3
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: QUALIMAP_RNASEQ {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [29.GB] ) }
  }

  withName: PICARD_MARKDUPLICATES {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [34.GB] ) }
  }

  withName: RSEQC_INFEREXPERIMENT {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 1
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: SAMPLESHEET_CHECK {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: MULTIQC {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [2.GB] ) }
  }

  withName: SALMON_TX2GENE {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [11.GB] ) }
  }

  withName: SALMON_SE_TRANSCRIPT {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [2.GB] ) }
  }

  withName: SAMTOOLS_IDXSTATS {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: UCSC_BEDCLIP {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: STRINGTIE_STRINGTIE {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 5
      memory = { adj_mem( task, [2.GB] ) }
  }

  withName: RSEQC_BAMSTAT {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: SALMON_SE_GENE {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [2.GB] ) }
  }

  withName: TRIMGALORE {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 5
      memory = { adj_mem( task, [4.GB] ) }
  }

  withName: SALMON_TXIMPORT {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [3.GB] ) }
  }

  withName: UCSC_BEDGRAPHTOBIGWIG {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: PRESEQ_LCEXTRAP {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [5.GB, 59.GB] ) }
  }

  withName: RSEQC_JUNCTIONSATURATION {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [4.GB] ) }
  }

  withName: CAT_FASTQ {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: SALMON_SE_GENE_LENGTH_SCALED {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [2.GB] ) }
  }

  withName: RSEQC_READDISTRIBUTION {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [2.GB] ) }
  }

  withName: DESEQ2_QC_STAR_SALMON {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 20
      memory = { adj_mem( task, [3.GB] ) }
  }

  withName: CUSTOM_GETCHROMSIZES {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 1
      memory = { adj_mem( task, [1.GB] ) }
  }

  withName: SAMTOOLS_SORT {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 5
      memory = { adj_mem( task, [6.GB] ) }
  }

  withName: BEDTOOLS_GENOMECOV {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [12.GB] ) }
  }

  withName: MULTIQC_CUSTOM_BIOTYPE {
      maxErrors     = '-1'
      maxRetries    = 2
      errorStrategy = { task.attempt <= 2 ? 'retry' : 'finish' }

      cpus   = 2
      memory = { adj_mem( task, [1.GB] ) }
  }

}

def adj_mem(task, progression) {
    def n_attempts = task.attempt
    if ( task.exitStatus ) {
        // Only increase memory if error was memory-related
        def memory_exit_codes = [104, 134, 137, 139, 143, 247]
        if ( memory_exit_codes.contains(task.exitStatus) ) {
            n_attempts = task.attempt
        } else {
            n_attempts = task.attempt - 1
        }
    }

    if ( n_attempts <= progression.size() ) {
        return progression[n_attempts - 1]
    } else {
        diff = n_attempts - progression.size()
        return progression.last() * Math.pow(2, diff)
    }
}

